import pandas as pd  
import numpy as np  
import matplotlib.pyplot as plt  
import seaborn as sns  
from sklearn.model_selection import train_test_split  
from sklearn.linear_model import LinearRegression  
from sklearn.ensemble import RandomForestRegressor  
from sklearn.metrics import r2_score, mean_squared_error  
data = pd.read_csv("Uber.csv")   
data  
data["pickup_datetime"] = pd.to_datetime(data["pickup_datetime"])  
missing_values = data.isnull().sum()  
print("Missing values in the dataset:")  
print(missing_values)  
data.dropna(inplace=True)  
missing_values = data.isnull().sum()  
print("Missing values after handling:")  
print(missing_values)  
sns.boxplot(x=data["fare_amount"])  
plt.show()  
Q1 = data["fare_amount"].quantile(0.25)  
Q3 = data["fare_amount"].quantile(0.75)  
IQR = Q3 - Q1  
threshold = 1.5  
lower_bound = Q1 - threshold * IQR  
upper_bound = Q3 + threshold * IQR  
data_no_outliers = data[(data["fare_amount"] >= lower_bound) & (data["fare_amount"] <= upper_bound)]  
sns.boxplot(x=data_no_outliers["fare_amount"])  
plt.show()  
data.plot(kind="box",subplots=True, layout=(7, 2), figsize=(15, 20))  
correlation_matrix = data.corr()  
sns.heatmap(correlation_matrix, annot=True)  
plt.show()  
X = data[[’pickup_longitude’, ’pickup_latitude’, ’dropoff_longitude’, ’dropoff_latitude’, ’passenger_count’]]  
y = data[’fare_amount’]  #Target  
y  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  
lr_model = LinearRegression()  
lr_model.fit(X_train, y_train)  
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)  
rf_model.fit(X_train, y_train)  
y_pred_lr = lr_model.predict(X_test)  
y_pred_lr  
print("Linear Model:",y_pred_lr)  
y_pred_rf = rf_model.predict(X_test)  
print("Random Forest Model:", y_pred_rf)  
r2_lr = r2_score(y_test, y_pred_lr)  
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))  
print("Linear Regression - R2:", r2_lr)  
print("Linear Regression - RMSE:", rmse_lr)  
r2_rf = r2_score(y_test, y_pred_rf)  
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))  
print("Random Forest Regression R2:", r2_rf)  
print("Random Forest Regression RMSE:",rmse_rf)
